theme_minimal()
# Fit a linear model: TSLA return ~ S&P500 return
df$TSLA_pct <- df$TSLA * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(TSLA_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
# Print result
cat("Beta for TSLA stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
ggplot(stocks_daily_return, aes(x = sp500, y = TSLA)) +
geom_point(color = "darkgreen")
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]  # 第一个非NA值
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG, Ri, Rm)
# Step 3: Convert daily returns into cumulative index (starting from 100)
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)
# Step 4: Plot interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df$Date,
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Index Value (Base = 100)"))
return(fig)
}
# Step 5: Run the function to generate the chart
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")
# Calculate average daily return using dplyr
avg_daily_returns <- df %>%
select(-Date) %>%
summarise(across(everything(), ~ mean(.x, na.rm = TRUE)))
print(avg_daily_returns)
# Select any stock, let's say Apple(Ri)
df$Ri
# Select the market returns (Rm), e.g., S&P 500
head(df$Rm)
# Plot a scatter plot between the selected stock (Ri) and the market (Rm)
ggplot(df, aes(x = Rm, y = Ri)) +
geom_point(color = "darkgreen") +
labs(
title = "Scatter Plot: Stock vs Market Returns",
x = "Market Return (S&P 500)",
y = "Stock Return (AAPL)"
) +
theme_minimal()
# Fit linear model: AAPL ~ sp500
## Create new columns: convert daily returns to percentages (to match Python's result)）
df$Ri_pct <- df$Ri * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(Ri_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
cat("Beta for AAPL stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Scatter plot with fitted regression line: y = beta * x + alpha
ggplot(df, aes(x = Rm_pct, y = Ri_pct)) +
geom_point(color = "blue") +  # Scatter points
geom_abline(intercept = alpha, slope = beta, linetype = "dashed", color = "red") +  # Regression line
labs(
title = "Scatter Plot: AAPL vs S&P500 Returns",
x = "Market Return (S&P 500, %)",
y = "AAPL Return (%)"
) +
theme_minimal()
# Fit a linear model: TSLA return ~ S&P500 return
df$TSLA_pct <- df$TSLA * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(TSLA_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
# Print result
cat("Beta for TSLA stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
ggplot(df, aes(x = Rm, y = TSLA)) +
geom_point(color = "darkgreen")
geom_abline(intercept = alpha, slope = beta, color = "green")
labs(
title = "Scatter Plot: TSLA vs S&P500 Returns",
x = "S&P500 Return",
y = "TSLA Return"
) +
theme_minimal()
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG, Ri, Rm)
# Step 3: Convert daily returns into cumulative index (starting from 100)
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)
# Step 4: Plot interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df$Date,
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Index Value (Base = 100)"))
return(fig)
}
# Step 5: Run the function to generate the chart
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")
# Calculate average daily return using dplyr
avg_daily_returns <- df %>%
select(-Date) %>%
summarise(across(everything(), ~ mean(.x, na.rm = TRUE)))
print(avg_daily_returns)
# Select any stock, let's say Apple(Ri)
df$Ri
# Select the market returns (Rm), e.g., S&P 500
head(df$Rm)
# Plot a scatter plot between the selected stock (Ri) and the market (Rm)
ggplot(df, aes(x = Rm, y = Ri)) +
geom_point(color = "darkgreen") +
labs(
title = "Scatter Plot: Stock vs Market Returns",
x = "Market Return (S&P 500)",
y = "Stock Return (AAPL)"
) +
theme_minimal()
# Fit linear model: AAPL ~ sp500
## Create new columns: convert daily returns to percentages (to match Python's result)）
df$Ri_pct <- df$Ri * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(Ri_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
cat("Beta for AAPL stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Scatter plot with fitted regression line: y = beta * x + alpha
ggplot(df, aes(x = Rm_pct, y = Ri_pct)) +
geom_point(color = "blue") +  # Scatter points
geom_abline(intercept = alpha, slope = beta, linetype = "dashed", color = "red") +  # Regression line
labs(
title = "Scatter Plot: AAPL vs S&P500 Returns",
x = "Market Return (S&P 500, %)",
y = "AAPL Return (%)"
) +
theme_minimal()
# Fit a linear model: TSLA return ~ S&P500 return
df$TSLA_pct <- df$TSLA * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(TSLA_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
# Print result
cat("Beta for TSLA stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
ggplot(df, aes(x = Rm, y = TSLA)) +
geom_point(color = "blue")
geom_abline(intercept = alpha, slope = beta, color = "green")
labs(
title = "Scatter Plot: TSLA vs S&P500 Returns",
x = "S&P500 Return",
y = "TSLA Return"
) +
theme_minimal()
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG, Ri, Rm)
# Step 3: Convert daily returns into cumulative index (starting from 100)
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)
# Step 4: Plot interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df$Date,
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Index Value (Base = 100)"))
return(fig)
}
# Step 5: Run the function to generate the chart
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")
# Calculate average daily return using dplyr
avg_daily_returns <- df %>%
select(-Date) %>%
summarise(across(everything(), ~ mean(.x, na.rm = TRUE)))
print(avg_daily_returns)
# Select any stock, let's say Apple(Ri)
df$Ri
# Select the market returns (Rm), e.g., S&P 500
head(df$Rm)
# Plot a scatter plot between the selected stock (Ri) and the market (Rm)
ggplot(df, aes(x = Rm, y = Ri)) +
geom_point(color = "darkgreen") +
labs(
title = "Scatter Plot: Stock vs Market Returns",
x = "Market Return (S&P 500)",
y = "Stock Return (AAPL)"
) +
theme_minimal()
# Fit linear model: AAPL ~ sp500
## Create new columns: convert daily returns to percentages (to match Python's result)）
df$Ri_pct <- df$Ri * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(Ri_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
cat("Beta for AAPL stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Scatter plot with fitted regression line: y = beta * x + alpha
ggplot(df, aes(x = Rm_pct, y = Ri_pct)) +
geom_point(color = "blue") +  # Scatter points
geom_abline(intercept = alpha, slope = beta, linetype = "dashed", color = "red") +  # Regression line
labs(
title = "Scatter Plot: AAPL vs S&P500 Returns",
x = "Market Return (S&P 500, %)",
y = "AAPL Return (%)"
) +
theme_minimal()
# Fit a linear model: TSLA return ~ S&P500 return
df$TSLA_pct <- df$TSLA * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(TSLA_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
# Print result
cat("Beta for TSLA stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Plot with regression line
ggplot(df, aes(x = Rm, y = TSLA)) +
geom_point(color = "blue") +
geom_abline(intercept = alpha / 100, slope = beta / 100, color = "green") +
labs(
title = "Scatter Plot: TSLA vs S&P500 Returns",
x = "S&P500 Return",
y = "TSLA Return"
) +
theme_minimal()
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG, Ri, Rm)
# Step 3: Convert daily returns into cumulative index (starting from 100)
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)
# Step 4: Plot interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df$Date,
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Index Value (Base = 100)"))
return(fig)
}
# Step 5: Run the function to generate the chart
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")
# Calculate average daily return using dplyr
avg_daily_returns <- df %>%
select(-Date) %>%
summarise(across(everything(), ~ mean(.x, na.rm = TRUE)))
print(avg_daily_returns)
# Select any stock, let's say Apple(Ri)
df$Ri
# Select the market returns (Rm), e.g., S&P 500
head(df$Rm)
# Plot a scatter plot between the selected stock (Ri) and the market (Rm)
ggplot(df, aes(x = Rm, y = Ri)) +
geom_point(color = "darkgreen") +
labs(
title = "Scatter Plot: Stock vs Market Returns",
x = "Market Return (S&P 500)",
y = "Stock Return (AAPL)"
) +
theme_minimal()
# Fit linear model: AAPL ~ sp500
## Create new columns: convert daily returns to percentages (to match Python's result)）
df$Ri_pct <- df$Ri * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(Ri_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
cat("Beta for AAPL stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Scatter plot with fitted regression line: y = beta * x + alpha
ggplot(df, aes(x = Rm_pct, y = Ri_pct)) +
geom_point(color = "blue") +  # Scatter points
geom_abline(intercept = alpha, slope = beta, linetype = "dashed", color = "red") +  # Regression line
labs(
title = "Scatter Plot: AAPL vs S&P500 Returns",
x = "Market Return (S&P 500, %)",
y = "AAPL Return (%)"
) +
theme_minimal()
# Fit a linear model: TSLA return ~ S&P500 return
df$TSLA_pct <- df$TSLA * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(TSLA_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
# Print result
cat("Beta for TSLA stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Plot with regression line
ggplot(df, aes(x = Rm_pct, y = TSLA_pct)) +
geom_point(color = "blue") +
geom_abline(intercept = alpha, slope = beta, color = "green") +
labs(
title = "Scatter Plot: TSLA vs S&P500 Returns",
x = "S&P500 Return (%)",
y = "TSLA Return (%)"
) +
theme_minimal()
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG, Ri, Rm)
# Step 3: Convert daily returns into cumulative index (starting from 100)
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)
# Step 4: Plot interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df$Date,
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Index Value (Base = 100)"))
return(fig)
}
# Step 5: Run the function to generate the chart
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")
# Calculate average daily return using dplyr
avg_daily_returns <- df %>%
select(-Date) %>%
summarise(across(everything(), ~ mean(.x, na.rm = TRUE)))
print(avg_daily_returns)
# Select any stock, let's say Apple(Ri)
df$Ri
# Select the market returns (Rm), e.g., S&P 500
head(df$Rm)
# Plot a scatter plot between the selected stock (Ri) and the market (Rm)
ggplot(df, aes(x = Rm, y = Ri)) +
geom_point(color = "darkgreen") +
labs(
title = "Scatter Plot: Stock vs Market Returns",
x = "Market Return (S&P 500)",
y = "Stock Return (AAPL)"
) +
theme_minimal()
# Fit linear model: AAPL ~ sp500
## Create new columns: convert daily returns to percentages (to match Python's result)）
df$Ri_pct <- df$Ri * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(Ri_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
cat("Beta for AAPL stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Scatter plot with fitted regression line: y = beta * x + alpha
ggplot(df, aes(x = Rm_pct, y = Ri_pct)) +
geom_point(color = "blue") +  # Scatter points
geom_abline(intercept = alpha, slope = beta, linetype = "dashed", color = "red") +  # Regression line
labs(
title = "Scatter Plot: AAPL vs S&P500 Returns",
x = "Market Return (S&P 500, %)",
y = "AAPL Return (%)"
) +
theme_minimal()
# Fit a linear model: TSLA return ~ S&P500 return
df$TSLA_pct <- df$TSLA * 100
df$Rm_pct <- df$Rm * 100
# Run linear regression using percentage returns
model <- lm(TSLA_pct ~ Rm_pct, data = df)
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]
# Print result
cat("Beta for TSLA stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
# Plot with regression line
ggplot(df, aes(x = Rm_pct, y = TSLA_pct)) +
geom_point(color = "blue") +
geom_abline(intercept = alpha, slope = beta, color = "green") +
labs(
title = "Scatter Plot: TSLA vs S&P500 Returns",
x = "S&P500 Return (%)",
y = "TSLA Return (%)"
) +
theme_minimal()
# Fit linear model: individual stock return (Ri) regressed on market return (Rm)
model <- lm(Ri ~ Rm, data = df)
# Extract beta (slope) and alpha (intercept) coefficients
beta <- coef(model)[["Rm"]]
alpha <- coef(model)[["(Intercept)"]]
# Print beta and alpha values
cat("Beta for AAPL stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
