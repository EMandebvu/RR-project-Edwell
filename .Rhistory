df <- read_csv("C:\Users\MI\Desktop\RR Project\data\cleaned_data.csv")
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
df <- read_csv("C:/Users/MI/Desktop/CAPM/data/stock.csv")
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]  # 第一个非NA值
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]  # 第一个非NA值
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
library(plotly)
# Function to create an interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()  # Initialize empty plotly figure
# Loop through all columns except the first (assumed to be Date)
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df[[1]],  # or df$Date if the column is named "Date"
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
# Add layout and title
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Value"))
fig  # Display the interactive plot
}
# Example usage
interactive_plot(stocks_df, 'Prices')
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]  # 第一个非NA值
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
library(plotly)
# Function to create an interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()  # Initialize empty plotly figure
# Loop through all columns except the first (assumed to be Date)
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df[[1]],  # or df$Date if the column is named "Date"
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
# Add layout and title
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Value"))
fig  # Display the interactive plot
}
# Example usage
interactive_plot(df, 'Prices')
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]  # 第一个非NA值
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG)
# Step 3: Convert daily returns into cumulative index (starting from 100)
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)
# Step 4: Plot interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df$Date,
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Index Value (Base = 100)"))
return(fig)
}
# Step 5: Run the function to generate the chart
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]  # 第一个非NA值
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG, sp500, rf)
library(plotly)
library(tidyverse)
library(dygraphs)
library(ggplot2)
library(readr)
df <- read_csv("C:/Users/MI/Desktop/RR Project/data/cleaned_data.csv")
head(df)
# Function to normalize prices based on the initial (first) value
normalize_prices <- function(df) {
df_norm <- df
for (col in names(df)[-1]) {
first_value <- df[[col]][which(!is.na(df[[col]]))[1]]  # 第一个非NA值
df_norm[[col]] <- df[[col]] / first_value
}
return(df_norm)
}
# Step 1: Convert Date column to Date format
df$Date <- as.Date(df$Date)
# Step 2: Select only the stock returns (exclude Ri and Rm for now)
returns_df <- df %>%
select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG)
# Step 3: Convert daily returns into cumulative index (starting from 100)
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)
# Step 4: Plot interactive line chart
interactive_plot <- function(df, title) {
fig <- plot_ly()
for (col_name in colnames(df)[-1]) {
fig <- fig %>%
add_trace(x = df$Date,
y = df[[col_name]],
type = 'scatter',
mode = 'lines',
name = col_name)
}
fig <- fig %>%
layout(title = title,
xaxis = list(title = "Date"),
yaxis = list(title = "Index Value (Base = 100)"))
return(fig)
}
# Step 5: Run the function to generate the chart
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")
