---
title: "Capital Asset Pricing Model (CAPM) Analysis"
subtitle: "From Python to R: A Reproducible Workflow"
author: "Edwell B Mandebvu"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format: 
  html:
    toc: true          
    toc-depth: 3       
    code-fold: true     ## ADD --> Allows collapsing code chunks
    warning: false
    error: false
    code-tools: true    ## ADD --> Adds copy/paste buttons for code
editor: visual
---

## Stage 1: Load data

Load the necessary R packages—**`plotly`** for interactive plots, **`tidyverse`**, **`ggplot2`** for data manipulation and visualization and **`readr`** for data reading.

```{r}

#data-loading
# Load packages quietly
suppressPackageStartupMessages({
  library(plotly)
  library(tidyverse)
  library(ggplot2)
  library(readr)
  library(here)  ## ADD --> For path management
})

# Read data using relative paths
data_path <- here("data", "cleaned_data.csv")  ## Ensures portability
if (!file.exists(data_path)) stop("Data file not found. Check 'data/' directory.")

df <- read_csv(data_path, show_col_types = FALSE)  
head(df)
```

Converting Date column to Date type.

```{r}
df$Date <- as.Date(df$Date)
```

## Stage 2: Prep and normalizing returns

A subset of the dataset is created, focusing on selected stock returns (`BA`, `T`, `MGM`, `AMZN`, `IBM`, `TSLA`, `GOOG`, `Ri`) and the market return (`Rm`). Cumulative returns are then computed by chaining daily returns into an index format, normalized to a base value of 100. (RI is AAPL)

```{r}
# Select columns of interest: Date + selected stocks + market returns
returns_df <- df %>% select(Date, BA, T, MGM, AMZN, IBM, TSLA, GOOG, Ri, Rm)

# Calculate cumulative index (base 100) from daily returns
cumulative_df <- returns_df
cumulative_df[,-1] <- apply(returns_df[,-1], 2, function(x) cumprod(1 + x) * 100)

# Preview cumulative returns
head(cumulative_df)

```

## Stage 3: Interactive plot of cumulative stock performance

Line chart is generated using Plotly, visualizing the cumulative returns of selected stocks and the market over time. Each line represents a different asset, indexed to a starting value of 100.

```{r}
interactive_plot <- function(df, title) {
  fig <- plot_ly()
  
  for (col_name in colnames(df)[-1]) {
    fig <- fig %>%
      add_trace(x = df$Date,
                y = df[[col_name]],
                type = 'scatter',
                mode = 'lines',
                name = col_name)
  }
  
  fig <- fig %>%
    layout(title = title,
           xaxis = list(title = "Date"),
           yaxis = list(title = "Index Value (Base = 100)"))
  
  return(fig)
}

# Generate the interactive plot
interactive_plot(cumulative_df, "Stock Performance Indexed to 100")

```

## Stage 4: Average daily returns

Mean daily return is calculated for each stock and the market, summarizing the average performance over the observed period.

```{r}
avg_daily_returns <- df %>%
  select(-Date) %>%
  summarise(across(everything(), ~ mean(.x, na.rm = TRUE)))

print(avg_daily_returns)

```

## Stage 5: Plot - Single Stock (AAPL) vs Market Returns

```{r}
## Stage 5: Plot - Single Stock (AAPL) vs Market Returns

ggplot(df, aes(x = Rm, y = Ri)) +
  geom_point(color = "darkgreen", alpha = 0.6) +  ## ADD --> Transparency
  labs(
    title = "AAPL vs S&P 500 Daily Returns (Raw Values)",
    subtitle = "Each point represents a trading day",  ## ADD --> Context
    x = "Market Return (S&P 500)",
    y = "AAPL Return",
    caption = "Source: Kaggle dataset |"  ## ADD --> Attribution
  ) +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold"))  ## ADD --> Styling
```

## Stage 6: Linear regression and regression plot

A linear regression model is fitted to quantify the relationship between Ri's (AAPL) daily returns and the market’s daily returns, both expressed in percentages. The regression estimates two key parameters:

**Beta:** Measures sensitivity of the stock’s returns to market returns.

**Alpha:** Represents the stock’s return independent of market movements (intercept).

A scatter plot with the regression line is also produced to visually confirm this relationship.

Beta is a fundamental parameter in CAPM, indicating the stock’s systematic risk relative to the market. Alpha helps identify any abnormal returns beyond what CAPM predicts.

**Apple is used in this case because of its market influence, and relatively stable return trends.** As one of the largest and most closely watched companies, Apple often reflects the broader behavior of big tech stocks. Applying CAPM to Apple first provides a clean and intuitive illustration of the regression process and its visual interpretation. This serves as a practical baseline before applying the same procedure to other stocks in the portfolio.

```{r}
# Convert returns to percentage
df$Ri_pct <- df$Ri * 100
df$Rm_pct <- df$Rm * 100

# Fit linear regression model
model <- lm(Ri_pct ~ Rm_pct, data = df)

# Extract coefficients
beta <- coef(model)[["Rm_pct"]]
alpha <- coef(model)[["(Intercept)"]]

cat("Beta for AAPL stock is =", round(beta, 3), "and alpha is =", round(alpha, 3), "\n")
```

Beta of 1.113 indicates AAPL’s returns are 11.3% more sensitive to market movements than the average stock.\
Alpha of 0.053 shows AAPL generates a 5.3% excess return beyond what is predicted by market risk.

```{r}


# Plot scatter with regression line
ggplot(df, aes(x = Rm_pct, y = Ri_pct)) +
  geom_point(color = "blue") +
  geom_abline(intercept = alpha, slope = beta, linetype = "dashed", color = "red") +
  labs(
    title = "Scatter Plot: Ri (AAPL) vs Rm (S&P500) Returns",
    x = "Market Return (%)",
    y = "Ri Return (%)"
  ) +
  theme_minimal()

```

## Stage 7: Annualized market return and CAPM expected returns

This stage applies the Capital Asset Pricing Model (CAPM) to estimate the expected annual returns for a set of selected stocks. The procedure begins by calculating the annualized market return using the mean of daily Rm (S&P 500) returns scaled by 252 trading days. A fixed risk-free rate is then used along with each stock’s beta derived from a linear regression of the stock's returns on market returns to compute the CAPM expected return. Each stock’s beta, alpha, and expected return are stored, and a regression plot is generated to visually show the relationship between stock and market returns.

```{r}
# Define stock columns to analyze (update this list as per your data)
stock_columns <- c("BA", "T", "MGM", "AMZN", "IBM", "TSLA", "GOOG", "Ri") 

# Ensure market returns in percentage
df$Rm_pct <- df$Rm * 100

# Risk-free rate (annual, in %)
rf <- 0.66

# Annualize market return (mean daily return * 252 trading days * 100 to convert to %)
annual_rm <- mean(df$Rm, na.rm = TRUE) * 252 * 100
cat("Annualized market return (S&P500):", round(annual_rm, 3), "%\n")

# Data frame to store all results
results <- data.frame(Stock=character(), Beta=numeric(), Alpha=numeric(), ExpectedReturn=numeric(), stringsAsFactors=FALSE)

for (stock in stock_columns) {
  
  # Create daily returns in percent for the stock
  stock_pct_col <- paste0(stock, "_pct")
  df[[stock_pct_col]] <- df[[stock]] * 100
  
  # Fit linear regression: Stock returns ~ Market returns
  model <- lm(df[[stock_pct_col]] ~ df$Rm_pct)
  beta <- coef(model)[2]
  alpha <- coef(model)[1]
  
  # Calculate CAPM expected return
  expected_return <- rf + beta * (annual_rm - rf)
  
  # Save to results
  results <- rbind(results, data.frame(Stock = stock, Beta = beta, Alpha = alpha, ExpectedReturn = expected_return))
  
  # Plot scatter + regression line for each stock
  plot_data <- data.frame(Market = df$Rm_pct, Stock = df[[stock_pct_col]])
  p <- ggplot(plot_data, aes(x = Market, y = Stock)) +
    geom_point(color = "blue", alpha=0.5) +
    geom_abline(intercept = alpha, slope = beta, color = "red") +
    labs(title = paste("Scatter Plot & Regression:", stock, "vs S&P500"),
         x = "Market Return (%)",
         y = paste(stock, "Return (%)")) +
    theme_minimal()
  
  print(p)
  
  # Print beta, alpha, expected return
  cat(sprintf("Stock: %s | Beta: %.3f | Alpha: %.3f | Expected CAPM Return: %.3f%%\n", stock, beta, alpha, expected_return))
}

# Round results for better readability
results$Beta <- round(results$Beta, 3)
results$Alpha <- round(results$Alpha, 3)
results$ExpectedReturn <- round(results$ExpectedReturn, 3)

print(results)

```

**Beta (Volatility vs Market):**\
*TSLA* and *MGM* show high beta, indicating they tend to move more sharply in response to market changes, making them more volatile and risk-prone. In contrast, *T* and *IBM* have lower beta values, suggesting more stable price movements with less responsiveness to market fluctuations.

**Alpha (Excess Return vs Market):**\
Positive alpha values, seen in *AMZN*, *GOOG*, *TSLA*, and *AAPL*, suggest these stocks consistently outperformed the market beyond what CAPM predicts. Negative alphas in *T*, *MGM*, and *IBM* indicate underperformance, where returns fell short of their risk-adjusted expectations.

## Stage 8: Portfolio expected returns based on CAPM

This stage calculates the expected return of a portfolio using the CAPM-derived expected returns for each individual stock. After reapplying the CAPM formula to confirm the expected returns based on previously computed betas, the stocks are combined into a hypothetical equal-weighted portfolio. The portfolio's overall expected return is then obtained by taking the weighted average of the individual expected returns.

```{r}
# Calculate expected returns for each stock using CAPM formula
rf <- 0.66
rm <- round(mean(df$Rm, na.rm = TRUE) * 252 * 100, 1)

ER <- setNames(numeric(length(stock_columns)), stock_columns)

for (stock in stock_columns) {
  beta <- results$Beta[results$Stock == stock]
  ER[stock] <- rf + beta * (rm - rf)
  cat(sprintf("Expected Return Based on CAPM for %s is %.3f%%\n", stock, ER[stock]))
}

# Example: Equal weights portfolio (assuming 8 stocks)
portfolio_weights <- rep(1/length(stock_columns), length(stock_columns))

# Portfolio expected return
ER_portfolio <- sum(ER * portfolio_weights)

cat(sprintf("Expected Return for equal-weighted portfolio is %.3f%%\n", ER_portfolio))

```

## Stage 9: Validation

This stage validates the CAPM regression models for each stock by extracting key statistical measures from their linear regressions. For each stock, it calculates the beta coefficient's standard error, t-value, and p-value to test significance, along with the R-squared and adjusted R-squared values to assess model fit.

```{r}
# Stage 9: Validation statistics for all stocks CAPM models

library(broom)  # for tidy()

# Prepare data in long format for modeling
returns_long <- df %>%
  select(Date, all_of(stock_columns), Rm_pct) %>%
  pivot_longer(cols = all_of(stock_columns), names_to = "Stock", values_to = "Return") %>%
  # Ensure both Return and Rm_pct have no NA/Inf
  filter(!is.na(Return), !is.na(Rm_pct), !is.infinite(Return), !is.infinite(Rm_pct))

# Run linear regression for each stock
models <- returns_long %>%
  group_by(Stock) %>%
  summarise(
    model = list(lm(Return ~ Rm_pct, data = cur_data_all()))
  )

# Extract model statistics in a tidy dataframe
validation_stats <- models %>%
  mutate(
    tidy = map(model, broom::tidy),
    glance = map(model, broom::glance)
  ) %>%
  unnest(tidy) %>%
  filter(term == "Rm_pct") %>%
  select(Stock, estimate, std.error, statistic, p.value) %>%
  rename(
    Beta = estimate,
    StdError = std.error,
    Tvalue = statistic,
    Pvalue = p.value
  ) %>%
  left_join(
    models %>%
      mutate(glance = map(model, broom::glance)) %>%
      unnest(glance) %>%
      select(Stock, r.squared, adj.r.squared),
    by = "Stock"
  ) %>%
  arrange(Stock)

# Print the validation statistics summary
print(validation_stats)

# Optional: save to CSV
# write_csv(validation_stats, "capm_validation_stats.csv")

```

**Validation Summary of CAPM Models**

**P-values are effectively zero**, confirming that the relationship between market returns and individual stock returns is statistically significant.

**Beta estimates** are all positive and statistically robust, indicating each stock exhibits some level of market-related behavior. However, **R-squared values vary** substantially, ranging from *\~15% (TSLA)* to nearly *50% (IBM)*, indicating differing levels of explanatory power. Stocks like *IBM*, *GOOG*, and *BA* show relatively **high R-squared values**, meaning a substantial portion of their return variation is explained by the market. In contrast, *TSLA* shows a **low R-squared**, suggesting that a significant share of its performance is driven by idiosyncratic, non-market factors.

**Standard errors** for beta estimates are generally low, supporting the reliability of the beta values. **T-values are high** for all stocks, reinforcing the strength of the linear relationship.

Overall, the CAPM model performs reasonably well for most stocks, especially for large-cap and stable firms like *IBM* and *GOOG*, while being less explanatory for more volatile or speculative stocks like *TSLA*.
